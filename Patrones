Patrones de Diseño

*Singlenton (Creación )

-Asegurarse de tener solo un objeto para todas las solicitudes
-No pemritir crear mas de un objeto asi algun problema lo solicite

como crearlo :
1.Se debe crear la clase de tipo final para asegurarnos que no va hacer cambiada (inmutable).
2.Se debe crear un objeto de la clase con modificador de acceso private , estatico y final.
3.Se debe crear el constructor con modificador de acceso private , para segurarnos que no pueda ser
instanciado mediante este metodo.
4.Se crea un metodo con modificador de acceso publico y estatico que retornara la instancia del objeto que se creo en el 
paso numero 2.

*Factory - fabrica (Creacion)

-Crear diferentes objetos de la misma naturaleza en tiempo de ejecucion

1. crear una clase abstracta con el constructor y metdos abstractos a implemnetar en subclases  (Super Triangulo)
2. extender de la clase abstract las clases necesarias (isoceles, equilatero)
3. Crear clase factoriaTriangulo con metodo que devuelva el tipo de objeto triangulo y que reciba 
los atributos que le permitan decidir que tipo de objeto debe retorna (si es isoceles o equilatero).
4. en la clase principal crear un objeto de la clase factoriaTriangulo y llamar al metodo de creacion de triangulos
y asginacioón a un objeto Triangulo. (Triangulo triangulo = factoriatriangulo.fabrica(10,10,10);)

*Observer - 

-Un objeto   necesita notificar a otros objetos cuando cambia su estado. La idea es encapsular estos aspectos en
objetos diferentes permite variarlos y reutilizarlos indeopendientemente.
-Cuando existe una relación de dependencia  de uno a muchos que puede requerir que un objeto notifique a múltiples
objetos que dependen de él cuando cambia su estado

1.Crear la clase del objeto observable 
2.Crear una interfaz que tenga un metodo abstracto que implementen los observadores
3.Crear las clases observadoras implementando el o los metodos de la interfaz anterior
4.Crear una interfaz que tenga definido los metodos abstractos atach, detach y notify 
5.Crear clase que implemente la interfaz anterior y defina un arreglo privado y estatico que contenga en el tipo <>
 la interfaz que implemnetan los observadores , es decir el tipo de interfaz del paso 2.
6.Crear clase donde se define el metodo que recibira el objeto observable y se evaluara si cumple con un estado o caracteristica 
particular y de ser asi se crea un objeto de la clase que implementa la interfaz del paso 4 y llama al metodo notify
7.En el main se crea un objeto de la clase que implementa la interfaz del paso 4 y se llama al metodo attach para 
adicionar los observadores.
8.En el main crear un objeto o los objetos necesarios del observable
9.crear un objeto de la clase que se crea en el paso 6 y enviar el objeto observable por el metodo que este objeto tiene.



-----------------------------------------------------

Conceptos 

Ajax:  AJAX es una técnica que permite, mediante programas escritos en Javascript, que un servidor
  y un navegador intercambien información, posiblemente en XML, de forma asíncrona.

servlet : Los Servlets son módulos escritos en Java que se utilizan en un servidor, que puede ser o no ser servidor web, 
para extender sus capacidades de respuesta a los clientes al utilizar las potencialidades de Java.

Lazy:

Hibernate : Hibernate es una herramienta de mapeo objeto-relacional (ORM)  que implementa el API DE PERSISTENCIA DE JAVA (JPA

Ejb: te de negocio Java Enterprise, y para su ejecución necesita un contenedor EJB/J2EE (JBoss, WAS, OAS, etc). El hecho 
      de usar EJB’s te da acceso a los servicios del Contenedor EJB (manejo de transacciones, seguridad ,persistencia, etc)
      que simplifican bastante la construcción de soluciones empresariales.
      
pOJO : un POJO es una instancia de una clase que no extiende ni implementa nada en especial. Para los programadores 
        Java sirve para enfatizar el uso de clases simples y que no dependen de un framework en especial.
        
javaBean : Un JavaBean (o también conocido simplemente como Bean) es una clase simple en Java que cumple con ciertas normas con 
            los nombres de sus propiedades y métodos.Un JavaBean debe tener un constructor sin argumentos, tiene declarados todos 
            sus atributos como privados y para cada uno de ellos un método setter y getter, añadiéndole la palabra “set” o “get” al 
            nombre del atributo y deben ser serializables. 
            
jsf : JSF es un marco de trabajo para crear aplicaciones java J2EE basadas en el patron MVC
     
webservices : Un web service es un conjunto de protocolos y estándares que sirven para intercambiar datos entre aplicaciones      
     
SOAP : es un protocolo estándar que define cómo dos objetos en diferentes procesos pueden comunicarse por medio de intercambio
      de datos XML. Simple Object Access Protocol
      
SOA : Arquitectura orientada a servicios 
      
Interface: Es una coleccion de metodos abstractos     
      
sobrecarga:

sobreescritura:

Modificadores deacceso: Public,Protected,Default,Private

JPA : Es un api de persistencia que permite 
      
xsd: Un esquema xsd es un mecanimso para comprobar la validez de un documento xml

jax-ws : API a traves de la cual los programas java pueden interactuar 

jax-RS : API a traves de la cual los programas java pueden interactuar a traves de servicios rest

wsdl : WSDL, las siglas de Web Services Description Language, es un formato del Extensible Markup Language (XML) 
que se utiliza para describir servicios web (WS). 

REST : (Representational state transfer)

ACID: Atomicity Consistency Isolation Durability

JDBC template : un objeto que permite abstraer de forma mas eficiente la conexion a la base de datos,crear los objetos 
 preparedStatement, result set y cerrar la conexion. (RowMapper)
 
 JDNI : El Java Naming and Directory Interface (JNDI) es un interface de programación (API) 
  que proporciona funcionalidades de nombrado y directorio a las aplicaciones escritas usando Java. 
 
@XmlRootElement = permitira que los objetos de la clase sean serializables

@Produces : indica el tipo de contenido que se le enviara al cliente 

Metodos HTTP verbos RestFul: POST(Crear) ,GET(Leer) , PUT(Modificar)  Y DELETE(Eliminar) 
      
Patrones Creacionales:
  -Singlenton
  -Factory
  -Prototype (clona las instancias ya existentes)
  

Patrones de estructura:
  -Bridge (Puente) Separa la abstracción de la implementación.
  -Decorator (Decorador) Agrega funcionalidades a una clase de forma dinámica.
  -Facade (Fachada) Nos provee una interfaz unificada y simple para acceder a un sistema más complejo.

Patrones de comportamiento :
  -Observer
  -Command
  -Memento
  
  
  Pilares del la programacion oo
  
  - Abstraccion 
  - Encapsulamiento
  - Herencia
  - Polimorfismo

----------------------------
Pendientes :
*metodo que reciba un vector que en alguna posicion tenga otro vector (sub) y devuelva la
posición o posiciones donde exista un subvector.

*Programa que contabilice (medición) el tiempo que demora un metodo en ejecutarse (callback java - observable)

*Conceptos webservices restfull y soap (Ejemplo de cada uno)

*COnceptos : ajax , ejb, lazy, interface, herencia, clase abstracta, callback, sobreescritura y sobrecarga, polimorfismo

*https://blog.udemy.com/entrevista-de-trabajo-de-java-las-10-preguntas-mas-frecuentes-y-como-contestarlas/

*Revisar HV punto por punto (saber que decir)

*Observe

*Programacion reactiva

*Mapas, listas ...

*Patron circuit breaker 

*Devops (automatizacion), despliegue continuo , Rancher 

*Colas de mensajeria  (Rabbitmq)

*Map, Hashtable, HashMap, TreeMap, ConocurrentHashMap, LinkedHashMap

------------------------
*Rest full investigacion

http://www.jtech.ua.es/dadm/restringido/red/sesion02-apuntes.html#GET%2FRETRIEVEhttp://restfuljava.com/alumnos/Ricardo

https://www.tutorialspoint.com/restful/restful_methods.htm

http://www.apuntesdejava.com/2013/04/restful-parte-5-rest-con-autenticacion.html
------------------------

hayar sumatoria sucesiva  n(n+1)/2



