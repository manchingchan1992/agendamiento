/**************///////////////////////*******************

https://www.dropbox.com/sh/vnpsvesc0hzulim/AAB5a6THvWeUzqatNO3QvX4Ea?dl=0
/*************///////////////////////*******************

Diapositiva 18

Definir el diseño de la API de JDBC

Conectarse a una base de datos utilizando un controlador JDBC

Enviar consultas y obtener resultados de la base de datos

Especificar la información del controlador JDBC externamente

Realizar operaciones CRUD utilizando la API JDBC

2-------------------------------------------------- 

JDBC es un conjunto de clases e interfaces java que permiten la manipulación
de sentencias sql de una fuente de datos (Base de datos)

El Api JDBC proporciona a las aplicaciones Java un mecanismo
estandar e independiente de la plataforma para el acceso a la 
moyoria de las bases de datos

Cada fabricante de BD se encargará de proporcionar un driver JDBC especifico
para su BD

Las actividades basicas que se utilizan en JDBC son :

- Conectarse a un fuente de datos 
-Enviar querys a la BD 
-Recuperar y procesar los resultados obtenidos de la BD 

Todo el conjunto de clases e iterfaces que constituyen jdbc  se encuentran en el 
paquete java.sql

La API JDBC se compone de algunas clases concretas, como Fecha, Hora y SQLException, y un conjunto de interfaces
 que se implementan en una clase de controlador que proporciona el proveedor de la base de datos.

Debido a que la implementación es una instancia válida de la firma de método de interfaz, 
después de cargar las clases de controlador del proveedor de base de datos, puede acceder 
a ellas siguiendo la secuencia mostrada en la diapositiva:

Utilice la clase DriverManager para obtener una referencia a un Connectionobject utilizando el
 método getConnection. La firma típica de este método es getConnection (url, nombre, contraseña),
 donde urlis la URL de JDBC y nombre y password son cadenas que la base de datos acepta para una conexión.


Utilice el objeto Statement para obtener una instancia de un método ResultSet a través de un método 
executeQuery (consulta). Este método normalmente acepta una cadena (consulta), 
donde query es una cadena estática.

3-------------------------------------------

Para conectarnos a la base de datos una vez cargado el driver , utilizaremos 
el método getConnection que a su ves define una URL que indicara la ubicación de la bd

4--------------------------------------------
Componentes claves del API jdbc

La clase de controlador JDBC de cada proveedor también implementa las clases clave de API que utilizará para conectarse a la base de datos, ejecutar consultas y manipular datos:

Java.sql.Connection: Una conexión que representa la sesión entre su aplicación Java y la base de datos



Java.sql.Connection: Una conexión que representa la sesión entre su aplicación Java y la base de datos


Java.sql.Statement: Objeto utilizado para ejecutar una sentencia SQL estática y devolver el resultado


Java.sql.ResultSet: Objeto que representa un conjunto de resultados de base de datos


La principal ventaja de la API JDBC es que proporciona una forma flexible y portátil de comunicarse con una base de datos.

El controlador JDBC proporcionado por un proveedor de base de datos implementa cada una de las siguientes interfaces Java.
Su código Java puede usar la interfaz sabiendo que el proveedor de la base de datos proporcionó la implementación de cada uno de los métodos en la interfaz:

Conexión: Es una interfaz que proporciona una sesión con la base de datos. Mientras el objeto de conexión está abierto,
 puede acceder a la base de datos, crear sentencias, obtener resultados y manipular la base de datos. Al cerrar una conexión, se termina el acceso a 
la base de datos y se cierra la conexión abierta.


Declaración: Es una interfaz que proporciona una clase para ejecutar sentencias SQL y devolver los resultados. 
El Statementinterface es para consultas SQL estáticas. Hay otras dos subinterfaces: PreparedStatement, que extiende Statementand CallableStatement,
 que extiende PreparedStatement.

ResultSet: Es una interfaz que gestiona los datos resultantes devueltos de un estado

5-------------------------------------------------------------
Escribiendo querys y obteniendo resultados 

Para ejecutar consultas SQL con JDBC, debe crear un objeto contenedor de consulta SQL, una instancia del objeto Statement.


Para ejecutar consultas SQL con JDBC, debe crear un objeto contenedor de consulta SQL, una instancia del objeto Statement.


Utilice la instancia Statement para ejecutar una consulta SQL:


Tenga en cuenta que hay tres métodos de ejecución de sentencia:



Una sentencia SQL se ejecuta en una base de datos utilizando una instancia de un objeto Statement.
El objeto Statementobjeto es un objeto contenedor para una consulta.
Un objeto Statement se obtiene a través de Connectionobject: la conexión a la base de datos.
Por lo tanto, tiene sentido que desde una conexión, obtiene un objeto que puede utilizar para escribir sentencias en la base de datos.

6--------------------------------------------------------------
Uso de un objeto ResultSetObject

La primera invocación del método next () devuelve true y rs apunta a la primera fila de datos

La última invocación del método next () devuelve false, y el rsinstance ahora es nulo

7---------------------------------------------------------------

Operaciones CRUD con JDBC API: Recuperar

Las operaciones CRUD (Crear, Recuperar, Actualizar y Eliminar) son equivalentes a INSERT, SELECT, UPDATE y DELETEstatements en SQL.

CRUD Operations Using JDBC API: Retrieve


Lines 15–16:Use a try-with-resources statement to get an instance of an object that implements the Connectioninterface.

Line 17:Use the connection object to get an instance of an object that implements the Statementinterface from the Connectionobject.

Line 18:Create a ResultSetby executing the string query using the Statementobject

8--------------------------------------------------------------

Operaciones CRUD con JDBC: Recuperar

Hacer un bucle a través de todas las filas del ResultSet

Líneas 20-24: Obtenga los resultados de cada uno de los campos de datos de cada fila leídos en la tabla Empleados.

Líneas 25-28: Imprima los campos de datos resultantes en la consola del sistema.

Línea 30: SQLException: Esta clase extiende Exceptionthrown por el DriverManager, Statement y ResultSetmethods.

Línea 32: Esta es la llave de cierre para la instrucción try-with-resources en la línea 15. Este ejemplo es del proyecto SimpleJDBCExample.


run:Employee ID:   110Employee Name: Troy HammerBirth Date:    1965-03-31Salary:        102109.15

9--------------------------------------------------------------
Operaciones CRUD con JDBC API: Actualización

Esta diapositiva muestra la operación de actualización.

Se actualiza un registro de empleado existente y se muestra el contenido de la tabla Employee después de la operación de actualización en la consola de salida.
Líneas 9-12: Cree una consulta para actualizar un registro de empleado con ID 500 y ejecute la consulta.

Líneas 14-16: Imprima los campos de datos resultantes en la consola del sistema.


10 ---------------------------------------------------------------
Operaciones CRUD con JDBC API: Eliminar

Esta diapositiva muestra la operación de borrado.

Se suprime un registro de empleado existente y el contenido de la tabla Employee después de la operación de eliminación se muestra en la consola de salida

.Líneas 7-10: Cree una consulta para eliminar un registro de empleado con ID 500 y ejecutar la consulta.


Líneas 12-13: Imprimir los campos de datos resultantes en la consola del sistema

11-----------------------------------------------------------------

SQLException Class 

SQLException puede utilizarse para informar detalles sobre los errores de base de datos resultantes. Para informar todas las excepciones lanzadas, puede iterar a través de las SQLExceptions lanzadas:

• Se genera una SQLException de errores que se producen en uno de los siguientes tipos de acciones: métodos de controladores, métodos que acceden a la base de datos o intentos de obtener una conexión a la base de datos.


La SQLExceptionclass también implementa Iterable. Las excepciones se pueden encadenar y devolver como un solo objeto


• Se genera una SQLException si no se puede realizar la conexión a la base de datos debido a una información de nombre de usuario o contraseña incorrecta o si la base de datos está fuera de línea.


• SQLException también puede resultar intentando acceder a un nombre de columna que no es parte de la consulta SQL


• SQLException también se subclase, proporcionando granularidad de la excepción real lanzada

12-----------------------------------------------------------


Al cerrar un objeto de conexión, se cerrará automáticamente cualquier objeto de instrucción creado con esta conexión.

• El cierre de un objeto Statement cerrará e invalidará cualquier instancia de ResultSetcreated por el objeto Statement.


• Los recursos en poder del ResultSet pueden no ser liberados hasta que se recoja la basura. Por lo tanto, es una buena práctica cerrar explícitamente ResultSetobjects cuando ya no son necesarios.


• Cuando se ejecuta el método close () en ResultSetis, se liberan recursos externos.

• ResultSetobjects también se cierra implícitamente cuando se vuelve a ejecutar un objeto Statement asociado.


En resumen, es una buena práctica cerrar explícitamente JDBC Connection, Statement y ResultSetobjects cuando ya no los necesite.



-----------------------


Diapositiva 19

Después de completar esta lección, usted debería ser capaz de:

• Describir las ventajas de localizar una aplicación

• Definir lo que representa una localidad

• Lea y establezca el entorno local mediante el objeto Locale

• Crear y leer un archivo de propiedades

• Crear un paquete de recursos para cada entorno

• Llamar a un paquete de recursos desde una aplicación

Cambiar la configuración regional de un paquete de recursos


1-----------------------------------------------------------


¿Por qué localizar?

La decisión de crear una versión de una aplicación para uso internacional ocurre a menudo en el inicio de un proyecto de desarrollo.

• Software orientado a regiones y lenguajes

• Fechas, números y monedas formateadas para países específicos

• Capacidad para conectar datos específicos del país sin cambiar el código.

La localización es el proceso de adaptación del software para una región o un idioma específico mediante la adición de componentes específicos de la configuración regional y la traducción de texto. Además de los cambios de idioma, los elementos culturalmente dependientes, como fechas, números, monedas, etc. Es diseñar para la localización de modo que no se requieran cambios de codificación.

2-----------------------------------------------------------
Localizar una aplicación de ejemplo:

• Interfaz de usuario basada en texto

• Localizar menús

• Mostrar localizaciones de moneda y fecha


En el resto de esta lección, esta sencilla interfaz de usuario basada en texto se localizará para francés, chino simplificado y ruso. Introduzca el número indicado por el menú y esa opción de menú se aplicará a la aplicación. Introduzca qpara salir de la aplicación.

3------------------------------------

Un Local especifica un idioma y un país en particular:

• Lenguaje -Un código alpha-2 o alpha-3 ISO 639- "en" para inglés, "es" para español-Siempre utiliza minúsculas

• País: utiliza el código de país ISO 3166 alpha-2 o el código de área numérica M.49 de la ONU: "US" para Estados Unidos, "ES" para España: siempre usa mayúsculas

• Consulte los Tutoriales de Java para obtener detalles de todos los estándares de usuario.


Locale aLocale = new Locale.Builder().setLanguage("fr").setRegion("CA").build();


Ejemplo 

Date d = new Date();
DateFormat df1 = DateFormat.getDateInstance(DateFormat.LONG, new Locale("es"));
DateFormat df2 = DateFormat.getDateInstance(DateFormat.LONG, new Locale("es","MX"));
DateFormat df3 = DateFormat.getDateInstance(DateFormat.LONG, new Locale("en","US"));

System.out.println(df1.format(d));
System.out.println(df2.format(d));
System.out.println(df3.format(d));

Que nos imprime:
21 de diciembre de 2007
21 de diciembre de 2007
December 21, 2007

4 --------------------------------------------

Properties

La clase java.util.Properties se utiliza para cargar y guardar pares clave-valor en Java.
Puede almacenarse en un archivo de texto simple:

hostName = www.example.com
userName = user
password = pass

El nombre del archivo termina en .properties.
• El archivo puede estar en cualquier lugar que el compilador pueda encontrar


EL BENEFICIO DE UN ARCHIVO DE PROPIEDADES ES LA CAPACIDAD DE FIJAR VALORES PARA SU APLICACIÓN EXTERNAMENTE. EL ARCHIVO DE PROPIEDADES ES TIPICAMENTE LEIDO EN EL INICIO DE LA APLICACIÓN Y SE UTILIZA PARA VALORES POR DEFECTO. PERO EL ARCHIVO DE PROPIEDADES PUEDE SER TAMBIÉN PARTE INTEGRANTE DE UN SISTEMA DE LOCALIZACIÓN, DONDE GUARDA LOS VALORES DE LAS ETIQUETAS DE MENÚ Y EL TEXTO PARA VARIOS IDIOMAS QUE SU APLICACIÓN PUEDA APOYAR.

La convención para un archivo de propiedades es <filename> .properties, pero el archivo puede tener cualquier extensión que desee. El archivo se puede ubicar en cualquier lugar que la aplicación pueda encontrar.
5 ----------------------------------------------

Carga y uso de un archivo de propiedades

En el fragmento de código, se crea un objeto "properties". Luego, con una instrucción try, se abre un archivo relativo a los archivos de origen en el proyecto NetBeans. Cuando se carga, los pares nombre-valor se pueden utilizar en su aplicación.
Los archivos de propiedades le permiten inyectar fácilmente información de configuración u otros datos de aplicación en la aplicación.


6----------------------------------------------------------

Loading Properties from the Command Line

La información de la propiedad también se puede pasar en la línea de comandos.

La información de la propiedad también se puede pasar en la línea de comandos. La ventaja de pasar propiedades desde la línea de comandos es la simplicidad. No tiene que abrir un archivo y leer de él. Sin embargo, si tiene más de unos pocos parámetros, es preferible un archivo de propiedades


7---------------------------------------------------

Resource Bundle File

La diapositiva muestra un archivo de paquete de recursos de ejemplo para esta aplicación. Cada opción de menú se ha convertido en un par nombre / valor. Este es el archivo predeterminado para la aplicación. Para lenguajes alternativos, se utiliza una convención de nomenclatura especial:

MessageBundle_xx_YY.properties

where xxis the language code and YYis the country code

8 ------------------------------------------------------
Sample Resource Bundle Files

La diapositiva muestra los archivos del paquete de recursos para el francés y el chino. Tenga en cuenta que los nombres de archivo incluyen idioma y país. El texto inglés del elemento de menú ha sido reemplazado por alternativas en francés y chino.


Con los paquetes de recursos creados, basta con cargar los paquetes en la aplicación.

  El código fuente de la diapositiva muestra los pasos.

En primer lugar, cree un Localeobject que especifique el idioma y el país.

  A continuación, cargue el paquete de recursos especificando el nombre del archivo base para el lote y la configuración regional actual.

Tenga en cuenta que hay un par de maneras de definir una configuración regional.
  Localeclass incluye constantes predeterminadas para algunos países.
  Si una constante no está disponible, puede utilizar el código de idioma con el código de país para definir la ubicación. Por último, puede utilizar el método getDefault () para obtener la ubicación predeterminada.
9------------------------------------------------------
Sample Application: Main Loop


Para esta aplicación, un método run contiene el bucle principal. El bucle se ejecuta hasta que la letra "q" se escribe como entrada.

Un interruptor de cadena se utiliza para realizar una operación basada en el número introducido.

Se realiza una llamada simple a cada método para realizar cambios en la configuración regional y mostrar y dar formato a la salida

10------------------------------------------

The printMenuMethod


http://www.cambridgeenglish.org/learning-english/exam-preparation/  -> ingles


